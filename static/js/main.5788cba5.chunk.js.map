{"version":3,"sources":["img/weatherIcons/showerRain.png","img/weatherIcons/fewClouds.png","img/weatherIcons/rain.png","img/weatherIcons/scatteredClouds.png","img/weatherIcons/snow.png","img/weatherIcons/thunderstorm.png","img/weatherIcons/brokenClouds.png","img/weatherIcons/clearSky.png","img/weatherIcons/mist.png","img/weatherIcons/clearSkyNight.png","img/weatherIcons/thunderstormNight.png","img/weatherIcons/fewCloudsNight.png","img/weatherIcons/rainNight.png","img/weatherIcons/scatteredCloudsNight.png","img/weatherIcons/showerRainNight.png","img/weatherIcons/snowNight.png","img/weatherIcons/brokenCloudsNight.png","img/weatherIcons/mistNight.png","components/Form.js","components/LongWeather.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","props","react_default","a","createElement","onSubmit","submit","value","onChange","change","type","placeholder","shortDaysName","LongWeather","showWeatherIcon","icon","src","clearSky","alt","fewClouds","scatteredClouds","brokenClouds","showerRain","rain","thunderstorm","snow","mist","_this2","this","daysArray","Object","toConsumableArray","weather","nightsArray","forecast","map","day","index","dayNumber","Date","dt_txt","getDay","maxTemp","main","temp","toFixed","minTemp","className","key","dt","Fragment","Component","Result","_props$weather","pressure","city","bigIcon","description","err","date","time","sunrise","sunset","wind","humidity","newDescription","substr","toUpperCase","sunriseTime","toLocaleTimeString","sunsetTime","clearSkyNight","fewCloudsNight","scatteredCloudsNight","brokenCloudsNight","showerRainNight","rainNight","thunderstormNight","snowNight","mistNight","console","log","content","index_es","faFan","spin","faTint","faTachometerAlt","src_components_LongWeather","concat","ApiKeyCurrentWeather","days","months","App","state","feelsLike","isSubmitted","handleInputCityChange","e","_this","setState","target","handleCitySearch","preventDefault","prevState","APICurrentWeather","fetch","then","response","ok","Error","status","json","data","dayName","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","sys","speed","feels_like","catch","prevProps","APIForecastWeather","nextDaysArray","list","filter","el","includes","splice","nextNightsArray","src_components_Form","src_components_Result","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5788cba5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/showerRain.ea44b3f6.png\";","module.exports = __webpack_public_path__ + \"static/media/fewClouds.594489b9.png\";","module.exports = __webpack_public_path__ + \"static/media/rain.da9a69a3.png\";","module.exports = __webpack_public_path__ + \"static/media/scatteredClouds.b2713366.png\";","module.exports = __webpack_public_path__ + \"static/media/snow.0c6db61b.png\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.f680ed92.png\";","module.exports = __webpack_public_path__ + \"static/media/brokenClouds.22dc64ea.png\";","module.exports = __webpack_public_path__ + \"static/media/clearSky.7b45a68d.png\";","module.exports = __webpack_public_path__ + \"static/media/mist.c6e67142.png\";","module.exports = __webpack_public_path__ + \"static/media/clearSkyNight.e1348740.png\";","module.exports = __webpack_public_path__ + \"static/media/thunderstormNight.612dc383.png\";","module.exports = __webpack_public_path__ + \"static/media/fewCloudsNight.a40bc25e.png\";","module.exports = __webpack_public_path__ + \"static/media/rainNight.aba42085.png\";","module.exports = __webpack_public_path__ + \"static/media/scatteredCloudsNight.8dbe25c7.png\";","module.exports = __webpack_public_path__ + \"static/media/showerRainNight.a3c0d515.png\";","module.exports = __webpack_public_path__ + \"static/media/snowNight.44f3387c.png\";","module.exports = __webpack_public_path__ + \"static/media/brokenCloudsNight.22dc64ea.png\";","module.exports = __webpack_public_path__ + \"static/media/mistNight.c6e67142.png\";","import React from 'react';\r\nimport './Form.css'\r\nconst Form = (props) => {\r\n  return (\r\n    <form onSubmit={props.submit}>\r\n      <input value={props.value}\r\n        onChange={props.change}\r\n        type=\"text\"\r\n        placeholder=\" Wpisz miasto...\"\r\n      />\r\n      <button type=\"submit\">Wyszukaj miasto</button>\r\n    </form>\r\n\r\n  );\r\n}\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './LongWeather.css'\r\n\r\nimport showerRain from '../img/weatherIcons/showerRain.png'\r\nimport fewClouds from '../img/weatherIcons/fewClouds.png'\r\nimport rain from '../img/weatherIcons/rain.png'\r\nimport scatteredClouds from '../img/weatherIcons/scatteredClouds.png'\r\nimport snow from '../img/weatherIcons/snow.png'\r\nimport thunderstorm from '../img/weatherIcons/thunderstorm.png'\r\nimport brokenClouds from '../img/weatherIcons/brokenClouds.png'\r\nimport clearSky from '../img/weatherIcons/clearSky.png'\r\nimport mist from '../img/weatherIcons/mist.png'\r\n\r\nconst shortDaysName = [\"NIEDZ\", \"PON\", \"WT\", \"ŚR\", \"CZW\", \"PT\", \"SOB\"]\r\n\r\nclass LongWeather extends Component {\r\n\r\n\r\n  showWeatherIcon = (icon) => {\r\n\r\n    if (icon === \"01d\" || icon === \"01n\") return <img src={clearSky} alt=\"ikona pogody\" />\r\n    else if (icon === \"02d\" || icon === \"02n\") return <img src={fewClouds} alt=\"ikona pogody\" />\r\n    else if (icon === \"03d\" || icon === \"03n\") return <img src={scatteredClouds} alt=\"ikona pogody\" />\r\n    else if (icon === \"04d\" || icon === \"04n\") return <img src={brokenClouds} alt=\"ikona pogody\" />\r\n    else if (icon === \"09d\" || icon === \"09n\") return <img src={showerRain} alt=\"ikona pogody\" />\r\n    else if (icon === \"10d\" || icon === \"10n\") return <img src={rain} alt=\"ikona pogody\" />\r\n    else if (icon === \"11d\" || icon === \"11n\") return <img src={thunderstorm} alt=\"ikona pogody\" />\r\n    else if (icon === \"13d\" || icon === \"13n\") return <img src={snow} alt=\"ikona pogody\" />\r\n    else if (icon === \"50d\" || icon === \"50n\") return <img src={mist} alt=\"ikona pogody\" />\r\n    else return <span>brak ikony</span>\r\n  }\r\n\r\n  render() {\r\n    const daysArray = [...this.props.weather.daysArray];\r\n    // if (daysArray.length > 4) daysArray = daysArray.splice(1);\r\n    const nightsArray = [...this.props.weather.nightsArray];\r\n    // if (nightsArray.length > 4) nightsArray = nightsArray.splice(0, 4);\r\n\r\n    const forecast = daysArray.map((day, index) => {\r\n      const dayNumber = new Date(daysArray[index].dt_txt).getDay()\r\n      const maxTemp = (day.main.temp < 0 && day.main.temp > -0.5) ? 0 : day.main.temp.toFixed()\r\n      const minTemp = (nightsArray[index].main.temp < 0 && nightsArray[index].main.temp > -0.5) ? 0 : nightsArray[index].main.temp.toFixed()\r\n      return (\r\n        <div className=\"content\" key={day.dt}>\r\n          <p className=\"day\" >{shortDaysName[dayNumber]}</p>\r\n          <div className=\"smallIcon\">{this.showWeatherIcon(day.weather[0].icon)}</div>\r\n          <p className=\"temp\">\r\n            <span className=\"max\">{maxTemp}&deg;</span>/\r\n            <span className=\"min\">{minTemp}&deg;C</span>\r\n          </p>\r\n        </div>\r\n      )\r\n    })\r\n    return (\r\n      <>\r\n        {forecast}\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default LongWeather\r\n\r\n","import React from 'react';\r\n\r\nimport './Result.css';\r\nimport LongWeather from './LongWeather'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFan, faTint, faTachometerAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport showerRain from '../img/weatherIcons/showerRain.png'\r\nimport fewClouds from '../img/weatherIcons/fewClouds.png'\r\nimport rain from '../img/weatherIcons/rain.png'\r\nimport scatteredClouds from '../img/weatherIcons/scatteredClouds.png'\r\nimport snow from '../img/weatherIcons/snow.png'\r\nimport thunderstorm from '../img/weatherIcons/thunderstorm.png'\r\nimport brokenClouds from '../img/weatherIcons/brokenClouds.png'\r\nimport clearSky from '../img/weatherIcons/clearSky.png'\r\nimport mist from '../img/weatherIcons/mist.png'\r\nimport clearSkyNight from '../img/weatherIcons/clearSkyNight.png'\r\nimport thunderstormNight from '../img/weatherIcons/thunderstormNight.png'\r\nimport fewCloudsNight from '../img/weatherIcons/fewCloudsNight.png'\r\nimport rainNight from '../img/weatherIcons/rainNight.png'\r\nimport scatteredCloudsNight from '../img/weatherIcons/scatteredCloudsNight.png'\r\nimport showerRainNight from '../img/weatherIcons/showerRainNight.png'\r\nimport snowNight from '../img/weatherIcons/snowNight.png'\r\nimport brokenCloudsNight from '../img/weatherIcons/brokenCloudsNight.png'\r\nimport mistNight from '../img/weatherIcons/mistNight.png'\r\n\r\nconst Result = (props) => {\r\n  const { pressure, city, bigIcon, description, err, value, date, time, sunrise, sunset, temp, wind, humidity } = props.weather\r\n\r\n  const firstLetter = description.substr(0, 1).toUpperCase()\r\n  const text = description.substr(1)\r\n  const newDescription = firstLetter + text\r\n\r\n  const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString() // w API sunrise jest bez milisekund, aby prawidłowo zadziałała metoda toLocaleTimeString () musimy mieć wartość w milisekundach.\r\n  const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\r\n  let src = \"\";\r\n\r\n  switch (bigIcon) {\r\n    case \"01d\": src = clearSky\r\n      break;\r\n    case \"01n\": src = clearSkyNight\r\n      break;\r\n    case \"02d\": src = fewClouds\r\n      break;\r\n    case \"02n\": src = fewCloudsNight\r\n      break;\r\n    case \"03d\": src = scatteredClouds\r\n      break;\r\n    case \"03n\": src = scatteredCloudsNight\r\n      break;\r\n    case \"04d\": src = brokenClouds\r\n      break;\r\n    case \"04n\": src = brokenCloudsNight\r\n      break;\r\n    case \"09d\": src = showerRain\r\n      break;\r\n    case \"09n\": src = showerRainNight\r\n      break;\r\n    case \"10d\": src = rain\r\n      break;\r\n    case \"10n\": src = rainNight\r\n      break;\r\n    case \"11d\": src = thunderstorm\r\n      break;\r\n    case \"11n\": src = thunderstormNight\r\n      break;\r\n    case \"13d\": src = snow\r\n      break;\r\n    case \"13n\": src = snowNight\r\n      break;\r\n    case \"50d\": src = mist\r\n      break;\r\n    case \"50n\": src = mistNight\r\n      break;\r\n    default:\r\n      console.log(\"ikona nie została odnaleziona\")\r\n      break;\r\n  }\r\n\r\n  let content = null\r\n  if (city) {\r\n    content = (\r\n      <div className=\"wrap\">\r\n        <div className=\"cityName\">\r\n          <p>{city.toUpperCase()}</p>\r\n          <div className=\"wind\">\r\n            <FontAwesomeIcon icon={faFan} spin />\r\n            <span className=\"windValue\">{(wind * 3.6).toFixed()} km/h</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mainWeather\">\r\n          <div className=\"left\">\r\n\r\n            <div className=\"date\">\r\n              <p>{date}</p>\r\n            </div>\r\n            <div className=\"time\">\r\n              <p>{time}</p>\r\n            </div>\r\n            <div className=\"parameters\">\r\n              <span className=\"humidity\">\r\n                <FontAwesomeIcon icon={faTint} />\r\n                {humidity} %\r\n                </span>\r\n              <span className=\"hPa\">\r\n                <FontAwesomeIcon icon={faTachometerAlt} />\r\n                {pressure} hPa\r\n                </span>\r\n              <p className=\"sun\">Wschód słońca: <span className=\"sunrise\">{sunriseTime}</span>\r\n                Zachód słońca: <span className=\"sunset\">{sunsetTime}</span>\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"right\">\r\n            <div className=\"icon\">\r\n              <p>{temp.toFixed(1)} &deg;C</p>\r\n              <img src={src} alt=\"\" />\r\n            </div>\r\n            <div className=\"description\">\r\n              <p>{newDescription}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"longWeather\">\r\n          <LongWeather weather={props.weather} />\r\n        </div>\r\n\r\n        <div className=\"update\">\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      {err ? <strong>{`Nie ma w bazie szukanego miasta \"${value}\"`}</strong> : content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;","import React, {\n  Component\n} from 'react';\nimport './App.css';\nimport Form from './Form'\nimport Result from './Result'\n\nconst ApiKeyCurrentWeather = \"6270a08038197d804b4e5f37eb3729ba\";\nconst ApiKeyForecastWeather = \"a3c80a9a7c718fdf83b1899283b37514\"\nconst days = [\"Niedziela\", \"Poniedziałek\", \"Wtorek\", \"Środa\", \"Czwartek\", \"Piatek\", \"Sobota\"]\nconst months = [\"Styczeń\", \"Luty\", \"Marzec\", \"Kwiecień\", \"Maj\", \"Czerwiec\", \"Lipiec\", \"Sierpień\", \"Wrzesień\", \"Październik\", \"Listopad\", \"Grudzień\"]\n\nclass App extends Component {\n\n  state = {\n    value: \"\",\n    date: \"\",\n    time: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    humidity: \"\",\n    feelsLike: \"\",\n    description: \"\",\n    bigIcon: \"\",\n    isSubmitted: false,\n    err: false,\n    daysArray: [],\n    nightsArray: [],\n  }\n\n  handleInputCityChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    })\n  }\n\n  handleCitySearch = (e) => {\n    e.preventDefault()\n    this.setState(prevState => ({\n      isSubmitted: true\n    }))\n\n    if (this.state.value) {\n      const APICurrentWeather = `//api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${ApiKeyCurrentWeather}&units=metric&lang=pl`\n\n      fetch(APICurrentWeather)\n        .then(response => {\n          if (response.ok) {\n            return response\n          } else {\n            throw Error(response.status)\n          }\n        })\n        .then(response => response.json())\n        .then(data => {\n          const dayName = days[new Date().getDay()]\n          const dayNumber = new Date().getDate()\n          const month = months[new Date().getMonth()]\n          const year = new Date().getFullYear()\n          const date = `${dayName}, ${dayNumber > 9 ? dayNumber : \"0\" + dayNumber} ${month} ${year}`\n          const hour = new Date().getHours()\n          const minutes = new Date().getMinutes()\n          const time = `${hour > 9 ? hour : \"0\" + hour} : ${minutes > 9 ? minutes : \"0\" + minutes}`\n\n          this.setState((prevState) => ({\n            value: \"\",\n            date,\n            time,\n            city: prevState.value,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            description: data.weather[0].description,\n            wind: data.wind.speed, //m/s\n            humidity: data.main.humidity, //wilgotność\n            feelsLike: data.main.feels_like, //odczuwalna temp\n            bigIcon: data.weather[0].icon,\n            err: false,\n          }))\n        })\n        .catch(err => {\n          console.log(err + \" nie połączono z  \" + APICurrentWeather)\n          this.setState(prevState => ({\n            err: true,\n          }))\n        })\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isSubmitted) {\n\n      const APIForecastWeather = `//api.openweathermap.org/data/2.5/forecast?q=${this.state.value}&appid=${ApiKeyForecastWeather}&units=metric&lang=pl`\n\n      if (this.state.value) {\n        fetch(APIForecastWeather)\n          .then(response => {\n            if (response.ok) {\n              return response\n            } else {\n              throw Error(response.status)\n            }\n          })\n          .then(response => response.json())\n          .then(data => {\n            let dayNumber = new Date().getDate()\n            dayNumber = dayNumber > 9 ? dayNumber : \"0\" + dayNumber\n\n            let nextDaysArray = data.list.filter(el => (el.dt_txt.includes(\"15:00:00\") && new Date(el.dt_txt).getDate() !== dayNumber)) //ważne\n            console.log(\"days\", nextDaysArray)\n            nextDaysArray.splice(4)\n            console.log(\"days\", nextDaysArray)\n            let nextNightsArray = data.list.filter(el => (el.dt_txt.includes(\"03:00:00\") && new Date(el.dt_txt).getDate() !== dayNumber))\n            console.log(\"nights\", nextNightsArray)\n            nextNightsArray.splice(4)\n            console.log(\"nights\", nextNightsArray)\n\n            this.setState(prevState => ({\n              isSubmitted: false,\n              daysArray: nextDaysArray,\n              nightsArray: nextNightsArray,\n            }))\n          })\n          .catch(err => {\n            console.log(err + \" nie połączono z  \" + APIForecastWeather)\n          })\n      }\n    }\n  }\n\n  render() {\n    return (< >\n      <div className=\"weather\" >\n        <h1 > Aplikacja pogody </h1>\n        <Form change={this.handleInputCityChange}\n          submit={this.handleCitySearch}\n          value={this.state.value}\n        />\n        < Result weather={this.state}\n        />\n      </div >\n    </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}